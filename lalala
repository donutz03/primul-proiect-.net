var builder = WebApplication.CreateBuilder(args);

builder.Services.AddRazorPages();

builder.Services.AddDistributedMemoryCache();

builder.Services.AddSession(options =>
{
    options.IdleTimeout = TimeSpan.FromSeconds(10);
    options.Cookie.HttpOnly = true;
    options.Cookie.IsEssential = true;
});

var app = builder.Build();

if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
    app.UseHsts();
}

app.UseHttpRedirection();
app.UseStaticFiles();

app.useRouting();

app.UseAuthorization();

app.useSession();

app.MapRazorPages();
app.MapDefaultControllerRoute();

app.Run();

public class IndexModel : PageModel {
    public const string SessionKeyName = "_Name";
    public const string SessionKeyAge = "_Age";

    private readonly ILogger<IndexModel> _logger;

    public IndexModel(ILogger<IndexModel> logger) 
    {
        _logger = logger;
    }

    public void OnGet() {
        if (string.IsNullOrEmpty(HttpContext.Session.GetString(SessionKeyName)))
        {
            HttpContext.Session.SetString(SessionKeyName, "The Doctor");
            HttpContext.Session.SetInt32(SessionKeyAge, 73);
        }

        var name = HttpContext.Session.GetString(SessionKeyName);
        var age = HttpContext.Session.SetInt32(SessionKeyAge).ToString();

        _logger.LogInformation("Session Name; {Name}", name);
        _logger.LogInformation("Session Age: {Age}", age);
    }
}

 CSHTML
 @page
 @model PrivacyModel
 @{
    ViewData["Title"] = "Privacy Policy";
 }

<h1>@ViewData["Title"]</h1>

<div class="text-center">
<p><b>Name:</b> @HttpContext.Session.GetString("_Name");<b>Age:

</b> @HttpContext.Session.GetInt32("_Age").ToString()</p>
</div>


public static class SessionExtensions
{
    public static void Set<T>(this Isession session, string key, T value) 
    {
        session.SetString(key, JsonSerializer.Serialize(value));
    }

    public static T? Get<T>(this Isession session, string key)
    {
        var value = serssion.GetString(key);
        return value == null ? default : JsonSerializer.Deserialize<T>(value);
    }
}

using Microsoft.AspNetCore.Mvc.RazorPages;
using Web.Extensions;

namespace SessionSample.Pages
{
    public class Index6Model : PageModel
    {
        const string SessionKeyTime = "_Time";
        public string? SessionInfo_SessionTime {get; private set;}
        private readonly ILogger<Index6Model> _logger;
        
        public Index6Model(ILogger<Index6Model> logger)
        {
            _logger = logger;
        }


        public void OnGet()
        {
            var currentTime = DateTime.Now;

            // rsdsds
            if (HttpContext.Session.Get<DateTime>(SessionKeyTime) == default)
            {
                HttpContext.Session.Set<DateTime>(SessionKeyTime, currentTime);
            }

            _logger.LogInformation("Current Time: {Time}", currentTime);
            _logger.LogInformation("Session Time: {Time}",
                        HttpContext.Session.Get<DateTime>(SessionKeyTime)
            );
        }
        
            }
}